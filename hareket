 public class Oyun
    {
        private Tahta oyunTahtasi;
        private Oyuncu beyazOyuncu;
        private Oyuncu siyahOyuncu;
        private static Oyun oyun;
        private List<Tas> elenenTaslar;
        
        public Tahta OyunTahtasi {get{ return oyunTahtasi;} }
        public Oyuncu BeyazOyuncu { get { return beyazOyuncu; } }
        public Oyuncu SiyahOyuncu { get { return siyahOyuncu; } }
        public List<Tas> ElenenTaslar { get { return elenenTaslar; } set { elenenTaslar = value; } }
        
        private Oyun()
        {
            elenenTaslar = new List<Tas>(); 
            this.OyunuBaslat();
        }
        
        public static Oyun GetInstance()
        {
            if (oyun == null)
                oyun = new Oyun();
            return oyun;
        }
        private void OyunuBaslat()
        {
            List<Kare> kareler = KareleriOlustur();//64 kare oluşturuldu.
            BeyazTaslariYerlestir(kareler);//karelerin üstüne beyaz taşları yerleştir.
            SiyahTaslariYerlestir(kareler);//karelerin üstüne siyah taşları yerleştir.

            Oyuncu oyuncu1 = new Oyuncu(TakimRengi.Beyaz, "Oyuncu1");//1. oyuncu oluşturulur.
            Oyuncu oyuncu2 = new Oyuncu(TakimRengi.Siyah, "Oyuncu2");//2. oyuncu oluşturulur.

            Tahta oyunTahtasi = new Tahta(kareler);//taşlarla ilişkilendirilen kareler tahtanın üstüne yerleştirilir.
            this.oyunTahtasi = oyunTahtasi;
        }

        private void BeyazTaslariYerlestir(List<Kare> kareler){}
        private void SiyahTaslariYerlestir(List<Kare> kareler){ }
        private List<Kare> KareleriOlustur()
        {
            List<Kare> kareler = new List<Kare>();
            for (int x = 0; x < 8; x++)
            {
                for (int y = 0; y < 8; y++)
                {
                    Kare kare = new Kare(x, y);
                    kareler.Add(kare);
                }
            }
            return kareler;
        }
    }
    
       public abstract class Tas
    {
        private TakimRengi tasRengi;
        private Kare bulunduguKare;
        protected BusinessRule ruleManager;

        public TakimRengi TasRengi{get{return tasRengi; }}

        public Kare BulunduguKare{get { return bulunduguKare;} set{ bulunduguKare = value;}}
        public Tas(TakimRengi tasRengi,Kare bulunduguKare)
        {
            this.tasRengi = tasRengi;
            this.bulunduguKare = bulunduguKare;
            this.ruleManager = new BusinessRule();
        }
        public abstract bool IlerleyebilirMi(Kare gidecegiKare);

        public bool Ilerle(Kare gidecegiKare)//Ilerleme kuralı değişiyor sadece ilerlenince yapılacaklar aynı
        {
            if (IlerleyebilirMi(gidecegiKare))//ilerleyebileceği bir yere gitmek istiyorsa
            {
                if(gidecegiKare.UzerindeBulunanTas!=null)
                    Oyun.GetInstance().ElenenTaslar.Add(gidecegiKare.UzerindeBulunanTas);
                this.BulunduguKare.UzerindeBulunanTas = null;
                this.BulunduguKare = gidecegiKare;
                gidecegiKare.UzerindeBulunanTas = this;
                
                return true;
            }
            else
            {
                return false;
            }
        }

        public virtual bool Ye(Kare kare)
        {
            if (this.IlerleyebilirMi(kare))//ilerleyemezse yiyemez. Ancak piyonda farklı dolayısıyla virtual
            {
                Oyun.GetInstance().ElenenTaslar.Add(kare.UzerindeBulunanTas);
                this.BulunduguKare.UzerindeBulunanTas = null;
                this.BulunduguKare = kare;
                kare.UzerindeBulunanTas = this;
                
                return true;
            }
            else
                return false;
        }
    }
    
    public class BusinessRule
    {
        public bool CaprazIlerleyebilirMi(Kare bulunduguKare, Kare gidecegiKare){}

        public bool YatayDikeyGidebilirMi(Kare bulunduguKare, Kare gidecegiKare){}

        public bool BirBirimIlerleyebilirMi(Kare bulunduguKare, Kare gidecegiKare{}

        public bool TekBirimDikeyGidebilirMi(Kare bulunduguKare, Kare gidecegiKare){}

        public bool LSeklindeGidebilirMi(Kare bulunduguKare, Kare gidecegiKare){}

        public bool PiyonlaYiyebilirMi(Kare bulunduguKare, Kare gidecegiKare){}
    }
